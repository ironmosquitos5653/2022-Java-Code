// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.RobotContainer;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.DrivetrainSubsystem;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DriveDistanceCommand extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final DrivetrainSubsystem m_drivetrainSubsystem;
    private double m_inches;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    static final double TICKS_PER_INCH = 2048d * (62d/9d) / (4d*3.141d);

    private double setPoint;
    private double startPosition;

    private PIDController pid;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public DriveDistanceCommand(double inches, DrivetrainSubsystem subsystem) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_inches = inches;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_drivetrainSubsystem = subsystem;
        addRequirements(m_drivetrainSubsystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
       
        RobotContainer.getInstance().m_drivetrainSubsystem.reset();
        double kp = .04;
        double ki = .06;
        double kd = .00;
        pid = new PIDController(kp, ki, kd);
        pid.setTolerance(.5);
        

        setPoint = m_inches;
        
        
       // RobotContainer.getInstance().m_drivetrainSubsystem.brakeMode();
        startPosition = RobotContainer.getInstance().m_drivetrainSubsystem.leftPosition()/TICKS_PER_INCH;

        pid.setSetpoint(setPoint);
    }

    private double getDistanceTraveled() {
        return (RobotContainer.getInstance().m_drivetrainSubsystem.leftPosition()-startPosition)/TICKS_PER_INCH;
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        SmartDashboard.putNumber("leftPosition", RobotContainer.getInstance().m_drivetrainSubsystem.leftPosition()/TICKS_PER_INCH);

        double speed = pid.calculate(getDistanceTraveled());

        if (speed > .5) {
            speed = .5;
        }
        if (speed < -.5) {
            speed = -.5;
        }
        RobotContainer.getInstance().m_drivetrainSubsystem.setspeed(speed);

        //System.out.println("distance = " + getDistanceTraveled());
        //System.out.println("Speed" + speed);
        
    }


    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        //RobotContainer.getInstance().m_drivetrainSubsystem.coastMode();
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
       return pid.atSetpoint();
       // return RobotContainer.getInstance().m_drivetrainSubsystem.leftPosition() > setPoint + startPosition;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
