// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkMaxPIDController;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.Spark;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class ShooterSubsystem extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    private static final int shooterMotor1ID = 6;
    private CANSparkMax m_shooterMotor1;


    private SparkMaxPIDController m_pidController;
    private RelativeEncoder m_encoder;
    public double kP, kI, kD, kIz, kFF, kMaxOutput, kMinOutput, maxRPM;
  

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private Spark advanceMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public ShooterSubsystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
advanceMotor = new Spark(0);
 addChild("advanceMotor",advanceMotor);
 advanceMotor.setInverted(false);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
       m_shooterMotor1 = new CANSparkMax(shooterMotor1ID, MotorType.kBrushless);
       m_shooterMotor1.restoreFactoryDefaults();
        
        m_pidController = m_shooterMotor1.getPIDController();

        // Encoder object created to display position values
        m_encoder = m_shooterMotor1.getEncoder();
            // PID coefficients
        kP = .0001; 
        kI = 0;
        kD = 0; 
        kIz = 0; 
        kFF = 0.000193; 
        kMaxOutput = 1; 
        kMinOutput = -1;
        maxRPM = 4000;

        // set PID coefficients
        m_pidController.setP(kP);
        m_pidController.setI(kI);
        m_pidController.setD(kD);
        m_pidController.setIZone(kIz);
        m_pidController.setFF(kFF);
        m_pidController.setOutputRange(kMinOutput, kMaxOutput);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    private static final double DEFAULT_HIGH_SPEED = .75;
    private static final double DEFAULT_LOW_SPEED = .3;
    double speed = DEFAULT_HIGH_SPEED;
    public void shooterOn(boolean isOn, boolean low) {
        double setPoint = maxRPM;
        //m_pidController.setReference(setPoint, CANSparkMax.ControlType.kVelocity);  
        if(low)
            speed = DEFAULT_LOW_SPEED;
        else
            speed = DEFAULT_HIGH_SPEED;
        if(isOn) {
            m_shooterMotor1.set(speed);
        }
        else{
            m_shooterMotor1.set(0);
        
        }
    }
    private static final double DEFAULT_ADVANCE_SPEED = -.7;
    double advanceSpeed = DEFAULT_ADVANCE_SPEED;
    public void advanceOn(boolean isOn) {
        advanceSpeed = DEFAULT_ADVANCE_SPEED;
        if(isOn) {
           advanceMotor.set(advanceSpeed);
           
        }
        else{
           advanceMotor.set(0);
            
        
        }
        SmartDashboard.putNumber("advance speed", advanceMotor.get());
    }
    public void reverseAdvanceOn(boolean isOn) {
        advanceSpeed = DEFAULT_ADVANCE_SPEED;
        if(isOn) {
           advanceMotor.set(-advanceSpeed);
           
        }
        else{
           advanceMotor.set(0);
            
        
        }
        SmartDashboard.putNumber("advance speed", advanceMotor.get());
    }
}

