// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.motorcontrol.Spark;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.Spark;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class ClimbSubsystem extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private DigitalInput topSwitch;
private DigitalInput bottomSwitch;
private Spark spark;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public ClimbSubsystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
topSwitch = new DigitalInput(0);
 addChild("TopSwitch", topSwitch);
 

bottomSwitch = new DigitalInput(1);
 addChild("BottomSwitch", bottomSwitch);
 

spark = new Spark(1);
 addChild("Spark",spark);
 spark.setInverted(false);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
       
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }
        // Put methods for controlling this subsystem
        // here. Call these from Commands.

    private static final double DEFAULT_CLIMB_SPEED = 1;
    boolean isOn = false;
    double climbSpeed = DEFAULT_CLIMB_SPEED;
    public void toggle() {
         climbSpeed = DEFAULT_CLIMB_SPEED;
        if(isOn) {
            spark.set(0);
        }
        else{
            spark.set(climbSpeed);
        
        }
        isOn = ! isOn;
        SmartDashboard.putNumber("Climb Speed", spark.get());
    }
    public void climbReverse() {
        spark.set(-climbSpeed);
        
    }
    public void stop() {
        spark.set(0);

    }
    public void start() {
        spark.set(climbSpeed);

    }
    public boolean atTop() {
        return topSwitch.get();

    }
    public boolean atBottom() {
        return !bottomSwitch.get();
    }

    
}

