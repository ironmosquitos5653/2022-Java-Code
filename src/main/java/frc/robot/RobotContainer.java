// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import oi.limelightvision.limelight.frc.LimeLight;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final ClimbSubsystem m_climbSubsystem = new ClimbSubsystem();
    public final ShooterSubsystem m_shooterSubsystem = new ShooterSubsystem();
    public final IntakeSubystem m_intakeSubystem = new IntakeSubystem();
    public final DrivetrainSubsystem m_drivetrainSubsystem = new DrivetrainSubsystem();

// Joysticks
private final Joystick joystick = new Joystick(0);
private final XboxController xboxController = new XboxController(1);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    



  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
      //SmartDashboard.putNumber("LL H Deg To Target", m_limeLight.getdegRotationToTarget());
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("OverBumperCommand", new OverBumperCommand());
    SmartDashboard.putData("LimelightShooterCommand", new LimelightShooterCommand());
    SmartDashboard.putData("LimelightIntakeCommand", new LimelightIntakeCommand());
    SmartDashboard.putData("LimelightDriveCameraCommand", new LimelightDriveCameraCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_drivetrainSubsystem.setDefaultCommand(new ArcadeDriveCommand( m_drivetrainSubsystem ) );


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.addOption("TwoBallAutoCommand", new TwoBallAutoCommand( m_drivetrainSubsystem ));
    m_chooser.addOption("FourBallAutoCommand", new FourBallAuto2( m_drivetrainSubsystem ));
    m_chooser.addOption("FiveBallAutoCommand", new FiveBallAutoCommand( m_drivetrainSubsystem ));
    m_chooser.addOption("TwoBallStraight", new TwoBallStraight( m_drivetrainSubsystem ));
    m_chooser.addOption("BasicAutoCommand", new BasicAutoCommand( m_drivetrainSubsystem ));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton overBumperJB = new JoystickButton(joystick, 8);        
overBumperJB.whenPressed(new OverBumperCommand() ,true);
    SmartDashboard.putData("OverBumperJB",new OverBumperCommand() );

final JoystickButton shootLowButtonJB = new JoystickButton(joystick, 2);        
shootLowButtonJB.whenPressed(new ShootCommand(false) ,true);
    SmartDashboard.putData("ShootLowButtonJB",new ShootCommand(false) );

final JoystickButton shootButtonJB = new JoystickButton(joystick, 1);        
shootButtonJB.whenPressed(new ShootCommand(false) ,true);
    SmartDashboard.putData("ShootButtonJB",new ShootCommand(false) );

final JoystickButton reverseClimbButtonJB = new JoystickButton(joystick, 4);        
reverseClimbButtonJB.whenHeld(new ReverseClimbCommand() ,true);
    SmartDashboard.putData("ReverseClimbButtonJB",new ReverseClimbCommand() );

final JoystickButton climbButtonJB = new JoystickButton(joystick, 3);        
climbButtonJB.whenHeld(new ClimbCommand() ,true);
    SmartDashboard.putData("ClimbButtonJB",new ClimbCommand() );

final JoystickButton spitBallButtonJB = new JoystickButton(joystick, 6);        
spitBallButtonJB.whenPressed(new SpitBallCommand() ,true);
    SmartDashboard.putData("SpitBallButtonJB",new SpitBallCommand() );

final JoystickButton intakeButtonJB = new JoystickButton(joystick, 5);        
intakeButtonJB.whenPressed(new IntakeCommand() ,true);
    SmartDashboard.putData("IntakeButtonJB",new IntakeCommand() );

final JoystickButton reverseClimbButton = new JoystickButton(xboxController, XboxController.Button.kY.value);        
reverseClimbButton.whenPressed(new ReverseClimbCommand() ,true);
    SmartDashboard.putData("ReverseClimbButton",new ReverseClimbCommand() );

final JoystickButton climbButton = new JoystickButton(xboxController, XboxController.Button.kX.value);        
climbButton.whenPressed(new ClimbCommand() ,true);
    SmartDashboard.putData("ClimbButton",new ClimbCommand() );

final JoystickButton directionButton = new JoystickButton(xboxController, XboxController.Button.kRightStick.value);        
directionButton.whenPressed(new DirectionCommand() ,true);
    SmartDashboard.putData("DirectionButton",new DirectionCommand() );

final JoystickButton spitBallButton = new JoystickButton(xboxController, XboxController.Button.kLeftBumper.value);        
spitBallButton.whenPressed(new SpitBallCommand() ,true);
    SmartDashboard.putData("SpitBallButton",new SpitBallCommand() );

final JoystickButton shootLowButton = new JoystickButton(xboxController, XboxController.Button.kB.value);        
shootLowButton.whenPressed(new ShootCommand(false) ,true);
    SmartDashboard.putData("ShootLowButton",new ShootCommand(false) );

final JoystickButton shootButton = new JoystickButton(xboxController, XboxController.Button.kA.value);        
shootButton.whenPressed(new AimandShootCommand(m_drivetrainSubsystem) ,true);
    SmartDashboard.putData("ShootButton",new AimandShootCommand(m_drivetrainSubsystem) );

final JoystickButton intakeButton = new JoystickButton(xboxController, XboxController.Button.kRightBumper.value);        
intakeButton.whenPressed(new IntakeCommand() ,true);
    SmartDashboard.putData("IntakeButton",new IntakeCommand() );



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public XboxController getXboxController() {
      return xboxController;
    }

public Joystick getJoystick() {
        return joystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

